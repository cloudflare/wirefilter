// Identifiers
//============================================================
ident = _{ ASCII_ALPHA ~ ASCII_ALPHANUMERIC* }
var = @{ ident ~ ("." ~ ident)* }


// Rhs
//============================================================
rhs = { int_range | int_lit }

// Int
int_lit = ${ "-"? ~ digits }
digits = _{ oct_digits | ("0x" ~ hex_digits) | dec_digits }
hex_digits = { ASCII_HEX_DIGIT+ }

// NOTE: we need to include 0, so i32::from_str_radix can parse it properly
oct_digits = { "0" ~ ASCII_OCT_DIGIT+ }
dec_digits = { ASCII_DIGIT+ }

// Int range (inclusive)
int_range = ${ int_lit ~ ".." ~ int_lit }


// Logical operators
//============================================================
logical_op = { op_or | op_and | op_xor }

op_or = { "||" | "or" }
op_and = { "&&" | "and" }
op_xor = { "^^" | "xor" }


// Binary operators
//============================================================
bin_op = {
    eq_op | ne_op | ge_op | le_op | gt_op | lt_op | band_op | contains_op | matches_op | in_op
}

eq_op = { "==" | "eq" }
ne_op = { "!=" | "ne" }
ge_op = { ">=" | "ge" }
le_op = { "<=" | "le" }
gt_op = { ">" | "gt" }
lt_op = { "<" | "lt" }
band_op = { "&" | "bitwise_and" }
contains_op = { "contains" }
matches_op = { "~" | "matches" }
in_op = { "in" }


// Expression
//============================================================
filter = { SOI ~ compound_expr ~ EOI }

compound_expr = { term ~ (logical_op ~ term)* }
term = _{ expr | "(" ~ compound_expr ~ ")" }
expr = { var ~ bin_op ~ rhs }


// Trivia
//============================================================
WHITESPACE = _{ " " | NEWLINE }
