// Identifiers
//============================================================
ident = _{ ASCII_ALPHA ~ ASCII_ALPHANUMERIC* }
var = @{ ident ~ ("." ~ ident)* }


// Rhs
//============================================================
// NOTE: unfortunately there is an ambiguity between IP literals and int literal.
// Though, in the worst case we'll backtrack only 4 characters.
rhs = {
    ipv4_range | ipv4_cidr | ipv4_lit | ipv6_range | ipv6_cidr | ipv6_lit |
    int_range | int_lit | str_lit | re_lit
}

// Int literal
int_lit = ${ "-"? ~ digits }
digits = _{ oct_digits | ( "0x" ~ hex_digits ) | dec_digits }
hex_digits = { ASCII_HEX_DIGIT+ }
// NOTE: we need to include 0, so i32::from_str_radix can parse it properly
oct_digits = { "0" ~ ASCII_OCT_DIGIT+ }
dec_digits = { ASCII_DIGIT+ }

// Int range
int_range = ${ int_lit ~ ".." ~ int_lit }

// String
str_lit = ${ "\"" ~ str_content ~ "\"" }
str_content = _{ ( text | ( esc ~ text? ) )* }
text = { (!("\"" | "\\") ~ ANY)+ }
esc = _{ "\\" ~ ( esc_alias | ( "x" ~ esc_hex_byte ) ) }
esc_alias = { "\"" | "\\" | "n" | "r" | "t" }
esc_hex_byte = { ASCII_HEX_DIGIT{2} }

// IP
ipv4_lit = @{ ASCII_DIGIT{1,3} ~ ( "." ~ ASCII_DIGIT{1,3} ){3} }
// NOTE: this is far from being precise IPv6 grammar, but it's not ambigious with IPv4 and
// int literal. Actual parsing is performed by Rust's std lib.
ipv6_lit = @{
    ( ":" | ASCII_ALPHANUMERIC{1,4} ) ~ ":" ~ ( ipv4_lit | ASCII_ALPHANUMERIC{1,4} | ":" )*
}

// IP ranges
ipv4_cidr = @{ ipv4_lit ~ "/" ~ ASCII_DIGIT{1,2} }
ipv6_cidr = @{ ipv6_lit ~ "/" ~ ASCII_DIGIT{1,3} }
ipv4_range = ${ ipv4_lit ~ ".." ~ ipv4_lit }
ipv6_range = ${ ipv6_lit ~ ".." ~ ipv6_lit }

// Regex
re_lit = ${ "/" ~ re_content ~ "/" }
re_content = { ( re_ch_gr | re_esc | re_unesc )+ }
re_unesc = _{ ( !( "/" | "\\" | "[" ) ~ ANY )+ }
re_esc = _{ "\\" ~ ANY }
re_ch_gr = _{ "[" ~ ( re_esc | re_ch_gr_unesc )* ~ "]" }
re_ch_gr_unesc = _{ ( !( "]" | "\\" ) ~ ANY )+ }


// Logical operators
//============================================================
logical_op = { op_or | op_and | op_xor }

op_or = { "||" | "or" }
op_and = { "&&" | "and" }
op_xor = { "^^" | "xor" }


// Binary operators
//============================================================
bin_op = {
    eq_op | ne_op | ge_op | le_op | gt_op | lt_op | band_op | contains_op | matches_op | in_op
}

eq_op = { "==" | "eq" }
ne_op = { "!=" | "ne" }
ge_op = { ">=" | "ge" }
le_op = { "<=" | "le" }
gt_op = { ">" | "gt" }
lt_op = { "<" | "lt" }
band_op = { "&" | "bitwise_and" }
contains_op = { "contains" }
matches_op = { "~" | "matches" }
in_op = { "in" }


// Expression
//============================================================
filter = { SOI ~ compound_expr ~ EOI }

compound_expr = { term ~ ( logical_op ~ term )* }
term = _{ expr | "(" ~ compound_expr ~ ")" }
expr = { var ~ (bin_op ~ rhs)? }


// Trivia
//============================================================
WHITESPACE = _{ " " | NEWLINE }
